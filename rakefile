PETSC_DIR = "../compori2122-master/petscbuild/petsc-3.15.4"
SLEPC_DIR = "../compori2122-master/petscbuild/slepc-3.15.1"
PETSC_ARCH = "opt"

CXX = "#{PETSC_DIR}/#{PETSC_ARCH}/bin/mpicxx"#"gcc"
CFLAGS = %W{
	-fopenmp
	-fstack-protector

	-march=nehalem
	-mtune=generic

	-Wall
	-Wno-unknown-pragmas
	-Wwrite-strings
	-Wno-strict-aliasing

	-O3
}
LFLAGS = %W{
	-Wl,-rpath,#{SLEPC_DIR}/#{PETSC_ARCH}/lib
	-L#{SLEPC_DIR}/#{PETSC_ARCH}/lib
	-lslepc
	-L#{PETSC_DIR}/#{PETSC_ARCH}/lib

	-Wl,-rpath,#{PETSC_DIR}/#{PETSC_ARCH}/lib
	-L#{PETSC_DIR}/#{PETSC_ARCH}/lib
	-L/usr/lib/gcc/x86_64-linux-gnu/10
	-lpetsc
	
	-lfftw3_mpi
	-lfftw3

	-llapack
	-lblas
	
	-lm
	-lstdc++
	-ldl
	-lmpifort
	-lmpi
	-lgfortran
	-lm
	-lpthread
	-lrt
	-lgfortran
	-lm
	-lgfortran

	-lgcc_s
	-lquadmath
	-lstdc++
	-ldl
	

}
CCOMMON = %W{
	common
}
CINCLUDE = %W{
	/usr/include
	/usr/include/mkl

	#{PETSC_DIR}/include
	#{PETSC_DIR}/#{PETSC_ARCH}/include
	#{SLEPC_DIR}/include
	#{SLEPC_DIR}/#{PETSC_ARCH}/include
}
CTEMPLATE = "tmpl.c"
##################################################
require "rake/loaders/makefile"
require "rake/clean"

DIR = ENV["dir"]
throw "envioment variable 'dir' must be set before running" unless DIR

OUT = File.join DIR, DIR.split(?/)[-1]

CLEAN.include File.join(DIR, "*.o"), File.join(DIR, "*.mf")
CCOMMON.each do |i|
	CLEAN.include File.join(i, "*.o"), File.join(i, "*.mf")
end
CLOBBER.include OUT

SOURCE_FILES = Rake::FileList[File.join(DIR, "*.c"), CCOMMON.map { |i| File.join(i, "*.c")}]
OBJECT_FILES = SOURCE_FILES.ext ".o"
DEPEND_FILES = SOURCE_FILES.ext ".mf"

task :default => [:build, :clean, :run]

desc "Create a new program with main file [file]"
task :create, [:file] do |t, args|
	args.with_defaults(file: DIR)
	mkdir DIR unless Dir.exists? DIR
	f = File.join(DIR, args.file + ".c")
	cp CTEMPLATE, f
end

desc "Run the program"
task :run => :build do |t|
	sh OUT
end

desc "Compile the program"
task :build => OBJECT_FILES do |t|
	sh "#{CXX} #{CFLAGS.join(?\s)} #{OBJECT_FILES} -o #{OUT} #{LFLAGS.join(?\s)}"
end

rule ".o" => ".c" do |t|
	sh "#{CXX} #{CFLAGS.join(?\s)} #{CINCLUDE.map { |i| " -I#{i}"}.join} -c #{t.source} -o #{t.name}"
end

rule ".mf" => ".c" do |t|
	cmd = "#{CXX} -MM #{t.source}"
	puts cmd
	mf = `#{cmd}`
	open t.name, "w" do |f|
		f.puts mf
		f.puts mf.sub(".o:", ".mf:")
	end
end

DEPEND_FILES.each { |dep| import dep }
DEPEND_FILES.each { |dep| file dep }